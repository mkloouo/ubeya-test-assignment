import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';
import { RootState } from '../../app/store';
import { DEFAULT_CITY } from '../../constants';
import {
  fetchCurrentWeather,
  fetchWeatherForecast,
  WeatherData as WeatherAPIWeatherData,
} from './weatherAPI';

interface CurrentWeatherData {
  description?: string;
  temp?: number;
}

interface WeatherData {
  current?: CurrentWeatherData;
  forecast?: CurrentWeatherData[];
}

export interface WeatherState {
  city: string;
  value?: WeatherData;
  status: 'idle' | 'loading' | 'failed';
}

const initialState: WeatherState = {
  city: DEFAULT_CITY,
  status: 'idle',
};

export const getCurrentWeatherAsync = createAsyncThunk(
  'weather/fetchCurrentWeather',
  async (city: string) => {
    const response = await fetchCurrentWeather(city);
    return response;
  }
);

export const getWeatherForecastAsync = createAsyncThunk(
  'weather/fetchWeatherForecast',
  async ({ city, country }: { city: string; country: string }) => {
    const response = await fetchWeatherForecast(city, country);
    return response;
  }
);

const processWeatherDataResponse = (item: WeatherAPIWeatherData) => ({
  description: item.weather.description,
  temp: item.temp,
});

export const weatherSlice = createSlice({
  name: 'weather',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    setWeather: (state, action: PayloadAction<WeatherData>) => {
      state.value = action.payload;
    },
    setCity: (state, action: PayloadAction<string>) => {
      state.city = action.payload;
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(getCurrentWeatherAsync.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(getCurrentWeatherAsync.fulfilled, (state, action) => {
        state.status = 'idle';
        state.value = {
          ...state.value,
          current: action.payload.data.map(processWeatherDataResponse)[0],
        };
      })
      .addCase(getWeatherForecastAsync.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(getWeatherForecastAsync.fulfilled, (state, action) => {
        state.status = 'idle';
        state.value = {
          ...state.value,
          forecast: action.payload.data.map(processWeatherDataResponse),
        };
      });
  },
});

export const { setWeather, setCity } = weatherSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.weather.value)`
export const selectCity = (state: RootState) => state.weather.city;
export const selectWeather = (state: RootState) => state.weather.value;

// TODO: possibly use hand-written async thunk
// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.
// export const incrementIfOdd =
//   (amount: number): AppThunk =>
//   (dispatch, getState) => {
//     const currentValue = selectCount(getState());
//     if (currentValue % 2 === 1) {
//       dispatch(incrementByAmount(amount));
//     }
//   };

export default weatherSlice.reducer;
